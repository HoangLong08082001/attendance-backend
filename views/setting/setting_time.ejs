<script>
    async function callProtectedAPI() {
      const token = localStorage.getItem("token"); // Lấy token từ localStorage
    
      if (!token) {
        document.getElementById("settingtimeboardss").style.display = "none"; 
        window.location.href = "/"; // Chuyển hướng về trang login
        return;
      }
    
      try {
        const response = await fetch("/api/admin/protectedRoute", {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
            "Authorization": `Bearer ${token}` // Gửi token trong Authorization header
          }
        });
    
        // Nếu API trả về 200 (OK), nghĩa là người dùng có quyền truy cập
        if (response.ok) {
          const result = await response.json();
          document.getElementById("settingtimeboardss").style.display = "block"; 

        } else if (response.status === 403) {
          alert("You do not have permission to access this page.");
          localStorage.removeItem("token"); // Xóa token
          window.location.href = "/"; // Chuyển hướng về trang login
        } else {
          const result = await response.json();
          console.error(result.message);  
          window.location.href = "/"; // Chuyển hướng về trang login
          alert("An unexpected error occurred.");
        }
      } catch (error) {
        console.error("Error while accessing protected route:", error);
        alert("An error occurred. Please try again later.");
      }
    }
    
    // Chỉ tải nội dung sau khi đã xác nhận quyền truy cập
    document.addEventListener("DOMContentLoaded", callProtectedAPI);
      </script> 

<script>
    const token = localStorage.getItem("token"); // Lấy token từ localStorage
    $(document).ready(function() {
$.ajax({
url: '/api/attendance/getsettingtime',
method: 'POST',
headers: {
  "Content-Type": "application/json",
  "Authorization": `Bearer ${token}`
},
success: function(response) {
  if (response.setting_time && response.setting_time.length > 0) {
    const timeSettings = response.setting_time[0];
    document.getElementById('timecheckintime').value = timeSettings.checkin_time;
    document.getElementById('timecheckouttime').value = timeSettings.checkout_time;
  } else {
    console.error("No time settings found.");
  }
},
error: function(err) {
  console.error('Error calling API:', err);
}
});
});
</script>

<main class="container-fluid page-body-wrapper" style="margin-top: 4%;display: none;" id="settingtimeboardss">
      <div class="content-wrapper">
        <div id="content" style="margin-top: 2%;">

            <!-- Begin Page Content -->
            <div class="container-fluid">

                <!-- Page Heading -->
                <h1 class="h3 mb-4 text-gray-800" style="margin-top: 2%;">Cài đặt thời gian</h1>
            
                <div class="row">
            
                    <div class="col-lg-6">
            
                        <div class="card shadow mb-4">
                            <div class="card-header py-3">
                                <h6 class="m-0 font-weight-bold text-primary">Cài đặt thời gian hiện tại :</h6>
                            </div>
                            <div class="card-body">
                                <label for="timecheckintime">Thời gian bắt đầu:</label>
                                <input type="text" id="timecheckintime" name="timecheckintime" required readonly>
                                <label for="timecheckouttime">Thời gian kết thúc:</label>
                                <input type="text" id="timecheckouttime" name="timecheckouttime" required readonly>
                            </div>
                        </div>
            
            
                    </div>
            
                    <div class="col-lg-6">
            
                        <div class="card shadow mb-4">
                            <div class="card-header py-3">
                                <h6 class="m-0 font-weight-bold text-primary">Cài đặt thời gian :</h6>
                            </div>
                            <div class="card-body">
                                <form id="settingTimeForm">
                                    <label for="timecheckintime_setting">Thời gian bắt đầu:</label>
                                    <input type="time" id="timecheckintime_setting" name="timecheckintime_setting" required >
                                    <label for="timecheckouttime_setting">Thời gian kết thúc:</label>
                                    <input type="time" id="timecheckouttime_setting" name="timecheckouttime_setting" required >
                                    <button type="submit">Xác nhận</button>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            
            </div>

        </div>
      </div>
      <!-- content-wrapper ends -->
</main>
<script>
  document.getElementById('settingTimeForm').addEventListener('submit', async function (event) {
    event.preventDefault();

    const checkin_setting = document.getElementById('timecheckintime_setting').value;
    const checkout_setting = document.getElementById('timecheckouttime_setting').value;

    // Tạo object chỉ chứa các trường không rỗng
    const updateData = {};
    if (checkin_setting) updateData.checkin_setting = checkin_setting;
    if (checkout_setting) updateData.checkout_setting = checkout_setting;

    try {
      const response = await fetch('/api/attendance/updatesettingtime', {
        method: 'POST',
        headers: {
          "Content-Type": "application/json",
          "Authorization": `Bearer ${token}` // Thay `token` bằng token thực tế
        },
        body: JSON.stringify(updateData)
      });

      const result = await response.json();

      if (response.ok) {
        showResultPopup('Thành công', result.message, function () {
          location.reload(); // Reload trang sau khi thành công
        });
      } else {
        console.error("Failed to update settings:", result.error);
        showResultPopup('Thất bại', 'Không thể cập nhật thiết lập.');
      }
    } catch (error) {
      console.error("Error updating settings:", error);
      showResultPopup('Lỗi', 'Đã xảy ra lỗi khi cập nhật thiết lập.');
    }
  });
</script>

<script src="vendor/jquery.min.js"></script>

<script src="vendor/jquery.easing.min.js"></script>

<script src="js/sb-admin-2.min.js"></script>

<script src="vendor/jquery.dataTables.min.js"></script>
<script src="vendor/dataTables.bootstrap4.min.js"></script>
<script src="js/navigation.js"></script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-datepicker@1.9.0/dist/css/bootstrap-datepicker.min.css">
<script src="https://cdn.jsdelivr.net/npm/bootstrap-datepicker@1.9.0/dist/js/bootstrap-datepicker.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap-datepicker@1.9.0/dist/locales/bootstrap-datepicker.vi.min.js"></script>