<script>
    async function callProtectedAPI() {
      const token = localStorage.getItem("token"); // Lấy token từ localStorage
    
      if (!token) {
        document.getElementById("attendboardss").style.display = "none"; 
        window.location.href = "/"; // Chuyển hướng về trang login
        return;
      }
    
      try {
        const response = await fetch("/api/admin/protectedRoute", {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
            "Authorization": `Bearer ${token}` // Gửi token trong Authorization header
          }
        });
    
        // Nếu API trả về 200 (OK), nghĩa là người dùng có quyền truy cập
        if (response.ok) {
          const result = await response.json();
          document.getElementById("attendboardss").style.display = "block"; 

        } else if (response.status === 403) {
          alert("You do not have permission to access this page.");
          localStorage.removeItem("token"); // Xóa token
          window.location.href = "/"; // Chuyển hướng về trang login
        } else {
          const result = await response.json();
          console.error(result.message);  
          window.location.href = "/"; // Chuyển hướng về trang login
          alert("An unexpected error occurred.");
        }
      } catch (error) {
        console.error("Error while accessing protected route:", error);
        alert("An error occurred. Please try again later.");
      }
    }
    
    // Chỉ tải nội dung sau khi đã xác nhận quyền truy cập
    document.addEventListener("DOMContentLoaded", callProtectedAPI);
      </script> 

<script>
  
    function calculateScore(checkin_time, checkout_time) {
      if (!checkin_time || !checkout_time) {
        return 'N/A';  // Trả về N/A nếu thiếu thời gian
      }
    
      const [checkinHours, checkinMinutes, checkinSeconds] = checkin_time.split(':').map(Number);
      const [checkoutHours, checkoutMinutes, checkoutSeconds] = checkout_time.split(':').map(Number);
    
      const checkinInSeconds = checkinHours * 3600 + checkinMinutes * 60 + checkinSeconds;
      const checkoutInSeconds = checkoutHours * 3600 + checkoutMinutes * 60 + checkoutSeconds;
    
      const workedInSeconds = checkoutInSeconds - checkinInSeconds;
      const hoursWorked = workedInSeconds / 3600;
    
      if (hoursWorked >= 8) {
        return 1;
      } else {
        return (hoursWorked / 8).toFixed(3); 
      }
    }
    
    const token = localStorage.getItem("token"); 
    
    $(document).ready(function () {
  // Khởi tạo Bootstrap Datepicker
  $('#monthYearPicker').datepicker({
    language: "vi",
    format: "dd/mm/yyyy",
    startView: 0,
    minViewMode: 0,
    autoclose: true,
    calendarWeeks: true,
    todayHighlight: true,
    clearBtn: true
  });

  // Lưu trữ dữ liệu chấm công từ API
  let logData = [];

  // Nút lọc dữ liệu
  $('#filterButton').on('click', function () {
    const selectedDate = $('#monthYearPicker').val();
    if (!selectedDate) {
      showResultPopup("Thông báo", "Vui lòng chọn tháng và năm.");
      return;
    }

    const [date,month, year] = selectedDate.split("/").map(num => parseInt(num, 10));

    if (isNaN(date) || isNaN(month) || isNaN(year)) {
      showResultPopup("Lỗi", "Dữ liệu tháng/năm không hợp lệ.");
      return;
    }

     // Gọi API mới để lấy dữ liệu theo tháng và năm
     $.ajax({
        url: '/api/attendance/getattendancebymonthalluserofadmin',
        method: 'POST',
        headers: {
          "Content-Type": "application/json",
          "Authorization": `Bearer ${token}`
        },
        data: JSON.stringify({ month, year }),
        success: function (response) {
          if (response && response.attendance && Array.isArray(response.attendance)) {
            const attendanceData = response.attendance;

            // Cập nhật bảng dữ liệu
            $('#dataTable').DataTable().clear().destroy();
            $('#dataTable tbody').empty();

            attendanceData.forEach(attendance => {
              $('#dataTable tbody').append(`
                <tr>
                  <td>${attendance.staff.id_staff}</td>
                  <td>${attendance.staff.name}</td>
                  <td>${attendance.date}/${attendance.month}/${attendance.year}</td>
                  <td>${attendance.checkin_time}</td>
                  <td>${attendance.checkout_time}</td>
                  <td>${attendance.point_attandance}</td>
                  <td>${attendance.description || 'N/A'}</td>
                  <td>${attendance.status.name_status || 'N/A'}</td>
                </tr>
              `);
            });

            $('#dataTable').DataTable();
          } else {
            showResultPopup("Thông báo", "Không có dữ liệu chấm công cho tháng đã chọn.");
          }
        },
        error: function (err) {
          console.error('Lỗi khi gọi API:', err);
          showResultPopup("Lỗi", "Không thể lấy dữ liệu từ API. Vui lòng thử lại!");
        }
      });
  });

  $('#filterButtonDate').on('click', function () {
    const selectedDate = $('#monthYearPicker').val();
    if (!selectedDate) {
      showResultPopup("Thông báo", "Vui lòng chọn tháng và năm.");
      return;
    }

    const [date,month, year] = selectedDate.split("/").map(num => parseInt(num, 10));

    if (isNaN(date) || isNaN(month) || isNaN(year)) {
      showResultPopup("Lỗi", "Dữ liệu tháng/năm không hợp lệ.");
      return;
    }

     // Gọi API mới để lấy dữ liệu theo tháng và năm
     $.ajax({
        url: '/api/attendance/getattendancebydatealluserofadmin',
        method: 'POST',
        headers: {
          "Content-Type": "application/json",
          "Authorization": `Bearer ${token}`
        },
        data: JSON.stringify({date, month, year }),
        success: function (response) {
          if (response && response.attendance && Array.isArray(response.attendance)) {
            const attendanceData = response.attendance;

            // Cập nhật bảng dữ liệu
            $('#dataTable').DataTable().clear().destroy();
            $('#dataTable tbody').empty();

            attendanceData.forEach(attendance => {
              $('#dataTable tbody').append(`
                <tr>
                  <td>${attendance.staff.id_staff}</td>
                  <td>${attendance.staff.name}</td>
                  <td>${attendance.date}/${attendance.month}/${attendance.year}</td>
                  <td>${attendance.checkin_time}</td>
                  <td>${attendance.checkout_time}</td>
                  <td>${attendance.point_attandance}</td>
                  <td>${attendance.description || 'N/A'}</td>
                  <td>${attendance.status.name_status || 'N/A'}</td>
                </tr>
              `);
            });

            $('#dataTable').DataTable();
          } else {
            showResultPopup("Thông báo", "Không có dữ liệu chấm công cho tháng đã chọn.");
          }
        },
        error: function (err) {
          console.error('Lỗi khi gọi API:', err);
          showResultPopup("Lỗi", "Không thể lấy dữ liệu từ API. Vui lòng thử lại!");
        }
      });
  });

  // Nút tải xuống dữ liệu
  $('#download_log').on('click', function () {
    const selectedDate = $('#monthYearPicker').val();
    if (!selectedDate) {
      showResultPopup("Thông báo", "Vui lòng chọn tháng và năm.");
      return;
    }

    const [date,month, year] = selectedDate.split("/").map(num => parseInt(num, 10));

    if (isNaN(month) || isNaN(year)) {
      showResultPopup("Lỗi", "Dữ liệu tháng/năm không hợp lệ.");
      return;
    }
    console.log(month,year);

    // const filteredData = logData.filter(attendance => {
    //   return attendance.month === month && attendance.year === year;
    // });
    // console.log(filteredData);
    // if (filteredData.length === 0) {
    //   showResultPopup("Thông báo", "Không có dữ liệu chấm công cho tháng đã chọn.");
    //   return;
    // }

    exportToCSV(month, year);
  });

  // Lấy dữ liệu chấm công từ API
  $.ajax({
    url: '/api/attendance/getattendancebyalluserofadmin',
    method: 'POST',
    headers: {
      "Content-Type": "application/json",
      "Authorization": `Bearer ${token}`
    },
    success: function (response) {
      if (response && response.attendance && Array.isArray(response.attendance)) {
        const data = response.attendance;

        // Lưu trữ dữ liệu để sử dụng lại
        logData = data;

        // Hiển thị dữ liệu ban đầu
        data.forEach(attendance => {
          $('#dataTable tbody').append(`
            <tr>
              <td>${attendance.staff.id_staff}</td>
              <td>${attendance.staff.name}</td>
              <td>${attendance.date}/${attendance.month}/${attendance.year}</td>
              <td>${attendance.checkin_time}</td>
              <td>${attendance.checkout_time}</td>
              <td>${attendance.point_attandance}</td>
              <td>${attendance.description || 'N/A'}</td>
              <td>${attendance.status.name_status || 'N/A'}</td>
            </tr>
          `);
        });

        // Khởi tạo DataTable
        $('#dataTable').DataTable();
      } else {
        console.error('Dữ liệu không phải là mảng hoặc phản hồi không chứa attendance:', response);
      }
    },
    error: function (err) {
      console.error('Lỗi khi gọi API:', err);
    }
  });
});

    function exportToCSV(month, year) {
  const confirmPopup = document.getElementById("confirmPopup");
  confirmPopup.style.display = "flex";
  const confirmMessage = document.getElementById("titlepopupconfirm");
  confirmMessage.innerText = `Bạn có chắc chắn muốn xuất dữ liệu công của tháng ${month}/${year} không?`;

  const confirmYesButton = document.getElementById("confirmYes");
  confirmYesButton.onclick = function () {
    closePopup("confirmPopup");

    // Thực hiện xuất dữ liệu sau khi người dùng xác nhận
    $.ajax({
      url: "/api/attendance/getuserbyadmin",
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${token}`,
      },
      data: JSON.stringify({ month: month, year: year }),
      success: function (response) {
        if (response.user && response.user.length > 0) {
          processAttendanceData(response.user, month, year);
          showResultPopup("Thành công", "Xuất dữ liệu thành công!");
        } else {
          showResultPopup("Thông báo", "Không có dữ liệu nhân viên hoặc bảng công!");
        }
      },
      error: function (error) {
        console.error("Lỗi khi gọi API:", error);
        showResultPopup("Lỗi", "Không thể lấy dữ liệu từ API. Vui lòng thử lại!");
      },
    });
  };
}
    
    function processAttendanceData(data, month, year) {
      const headers = ['Mã NV', 'Họ Tên'];
    
      const daysInMonth = new Date(year, month, 0).getDate();
      for (let day = 1; day <= daysInMonth; day++) {
        const dayString = `${day}`; 
        headers.push(`${dayString}`+ "/" + `${month}`); 
      }
    
      headers.push('Tổng Công');  
    
      const rows = data.map(user => {
        const row = [
          user.id_staff || 'N/A', // Mã NV
          user.name || 'N/A'      // Họ Tên
        ];
    
        let totalAttendance = 0;  
    
        for (let day = 1; day <= daysInMonth; day++) {
          const formattedDate = `${year}-${String(month).padStart(2, '0')}-${String(day).padStart(2, '0')}`; 
          
          // Kiểm tra xem user.attend có dữ liệu cho ngày này không
          const record = user.attend ? user.attend.find(att => {
            const attendDate = new Date(att.year, att.month - 1, att.date); 
            const targetDate = new Date(year, month - 1, day); 
    
            return attendDate.getTime() === targetDate.getTime();
          }) : null;
    
          const pointAttendance = record ? record.point_attandance : 0;
          totalAttendance += pointAttendance;
    
          row.push(pointAttendance || '');
        }
    
        row.push(totalAttendance);  // Cột tổng công
    
        return row;
      });
    
      rows.unshift(headers);
    
      const worksheet = XLSX.utils.aoa_to_sheet(rows);
      const workbook = XLSX.utils.book_new();
      XLSX.utils.book_append_sheet(workbook, worksheet, 'Log Data');
    
      const started = `${String(1).padStart(2, '0')}/${String(month).padStart(2, '0')}/${year}`;
      const ended = `${String(daysInMonth).padStart(2, '0')}/${String(month).padStart(2, '0')}/${year}`;
      XLSX.writeFile(workbook, `Chấm công tháng ${String(month).padStart(2, '0')}-${year}.xlsx`);
    }
    
    </script>
<style>
@media (max-width: 576px) {
    .container.mt-3 {
        display: block !important;
    }
    #monthYearPicker {
        width: 100% !important;
    }
    .fitlerforattendance {
        display: block !important;
        width: 100% !important;
    }
}

</style>
<main class="container-fluid page-body-wrapper" style="margin-top: 4%;display: none;" id="attendboardss">
      <div class="content-wrapper">
        <div id="content" style="margin-top: 2%;">

            <!-- Begin Page Content -->
            <div class="container-fluid">

                <!-- Page Heading -->
                <h1 class="h3 mb-2 text-gray-800"> Quản lí chấm công</h1>

                <!-- DataTales Example -->
                <div class="container mt-3" style="display: flex; align-items: center; gap: 20px; @media (max-width: 768px) { display: block;};">
                <input type="text" style=" @media (max-width: 768px) { width: 100;}; width: 60%; margin-top: 1.5%;" id="monthYearPicker" class="form-control" placeholder="Chọn tháng/năm">
                <div style="  @media (max-width: 768px) { width: 100;}; display: flex; align-items: center; gap: 20px; width: 60%; " class="fitlerforattendance">
                  <button id="filterButtonDate" class="btn btn-primary" style="width: 100%; margin-top: 3%;">Lọc theo ngày</button>
                  <button id="filterButton" class="btn btn-primary" style="width: 100%; margin-top: 3%;">Lọc theo tháng</button>
                  <button id="download_log" class="btn btn-primary" style="width: 100%; margin-top: 3%;">Tải</button>
                </div>
                </div>

                  </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-bordered" id="dataTable" width="100%" cellspacing="0">
                                <thead>
                                    <tr>
                                        <th>Mã nhân viên</th>
                                        <th>Họ và tên</th>
                                        <th>Ngày chấm công</th>
                                        <th>Thời gian vào làm</th>
                                        <th>Thời gian ra về</th>
                                        <th>Điểm đánh giá</th>
                                        <th>Mô tả</th>
                                        <th>Trạng thái</th>
                                    </tr>
                                </thead>
                                <tfoot>
                                    <tr>
                                        <th>Mã nhân viên</th>
                                        <th>Họ và tên</th>
                                        <th>Ngày chấm công</th>
                                        <th>Thời gian vào làm</th>
                                        <th>Thời gian ra về</th>
                                        <th>Điểm đánh giá</th>
                                        <th>Mô tả</th>
                                        <th>Trạng thái</th>
                                    </tr>
                                </tfoot>
                                <tbody>
                                    <!-- Dữ liệu sẽ được chèn vào đây từ Ajax -->
                                </tbody>
                            </table>
                        </div>
                    </div>
        </div>
      </div>
      <!-- content-wrapper ends -->
</main>

<script src="vendor/jquery.min.js"></script>

<script src="vendor/jquery.easing.min.js"></script>

<script src="js/sb-admin-2.min.js"></script>

<script src="vendor/jquery.dataTables.min.js"></script>
<script src="vendor/dataTables.bootstrap4.min.js"></script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-datepicker@1.9.0/dist/css/bootstrap-datepicker.min.css">
<script src="https://cdn.jsdelivr.net/npm/bootstrap-datepicker@1.9.0/dist/js/bootstrap-datepicker.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap-datepicker@1.9.0/dist/locales/bootstrap-datepicker.vi.min.js"></script>
